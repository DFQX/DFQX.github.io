<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阅读笔记《情绪的毒身体知道》</title>
    <link href="/2023/10/02/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8A%E6%83%85%E7%BB%AA%E7%9A%84%E6%AF%92%E8%BA%AB%E4%BD%93%E7%9F%A5%E9%81%93%E3%80%8B/"/>
    <url>/2023/10/02/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8A%E6%83%85%E7%BB%AA%E7%9A%84%E6%AF%92%E8%BA%AB%E4%BD%93%E7%9F%A5%E9%81%93%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<ul><li><p>作者：自凝心平（日）</p></li><li><p>出版时间：2021-07-15</p></li><li><p>读后感：书内容不多，读起来不用花很长时间，可以只关注感兴趣的地方。书中介绍了很多心理学与身体之间的关联，一些讲解也比较新颖，和通俗易懂，但还是有不少地方还是很懵。书中介绍的科学论据个人觉得似乎不是很充分，一些结论出现的比较唐突，特别是将心理情绪与身体相关联时，有的地方觉得有些道理，有些地方有说不通，这可能和每个人的体质有关。作者是一位有28年以上的心理学和医学经验的人，大多数内容应该还是可信的。</p></li><li><p>重要的记录</p><ul><li><p>独自一人边想事边用餐，或因为赶时间而狼吞虎咽时，最容易让胃错失分泌胃酸的时机。</p></li><li><p>肠壁如果被胃酸侵蚀，就会很容易受伤，也会造成栖息在肠内的无数细菌失衡，因此引起胀气的情形。</p></li><li><p>吃东西是要慢慢咀嚼以充分分泌唾液，吃东西时要极力避免因后悔或懊恼而一直想着心事。</p></li><li><p>多思则气结，想太多会让情绪抑郁、提不起劲儿，一旦这种情形恶化，就会伤到脾脏和胃、胰脏等消化系统器官。</p></li><li><p>一旦陷入某个思考的漩涡时，要自己“不去想这些事”是不可能的，不仅如此，通常是越不想去想，反而越容易想。这种时候，一定要设法切换思考路线，也就是刻意改变脑里的回路。例如：听音乐，这个回路与担心的回路刚好相反；闻香气，同样能诱导脑切换成与担心不同的回路。</p></li><li><p>身体在不同时间，主要器官活动情况：</p><ul><li><p>早上：</p><ul><li><p>5-7点：大肠</p></li><li><p>7-9点：胃</p></li><li><p>9-11点：胰脏</p></li></ul></li><li><p>中、下午：</p><ul><li><p>11-13点：心脏</p></li><li><p>13-15点：小肠</p></li><li><p>15-17点：膀胱</p></li></ul></li><li><p>黄昏：</p><ul><li>17-19点：肾脏</li></ul></li><li><p>晚上：</p><ul><li><p>19-21点：心包</p></li><li><p>21-23点：三焦</p></li></ul></li><li><p>深夜：</p><ul><li><p>23-1点：胆囊</p></li><li><p>1-3点：肝脏</p></li></ul></li><li><p>黎明：</p><ul><li>3-5点：肺</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言与文学</category>
      
      <category>阅读笔记</category>
      
      <category>健康</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读笔记《我们为什么要睡觉》</title>
    <link href="/2023/09/24/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%9D%A1%E8%A7%89%E3%80%8B/"/>
    <url>/2023/09/24/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%9D%A1%E8%A7%89%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<ul><li><p>不睡觉的坏处：</p><ul><li><p>每晚的规律睡眠少于6-7小时会破坏你的免疫系统，罹患癌症的风险将增加一倍以上。睡眠不足也是决定你是否会患上阿尔茨海默证的一个关键生活方式因素。睡眠不足——哪怕只是一个星期的适度减少——也有可能严重影响血糖水平，使你跨入糖尿病前期患者的前列。缺乏睡眠还会增加冠状动脉堵塞、变薄的风险，使你收到心血管疾病、中风和充血性心力衰竭的威胁。</p></li><li><p>睡眠不足会导致体重的增加，这对成年人和儿童都是一样的。如果你想节食，但同时保证不了充足的睡眠，那么节食就是徒劳的，因为你减掉的大部分体重都是来自肌肉，而不是脂肪。</p></li></ul></li><li><p>为什么要睡觉</p><ul><li><p>事实上，迄今为止人类研究过的每个物种都会睡觉。这个简单的事实证明，自我们的星球上出现过生命以来，或者在那之后不久，睡眠就出现了。</p></li><li><p>不睡觉有很多坏处，从进化的角度来说，睡觉只会更容易被捕食，不能寻找食物，不能寻找配偶或繁衍后代。但是睡觉在整个进化过程中都持续存在，这意味着睡眠所提供的好处一定远远超过所有显而易见的危险和不利。</p></li></ul></li><li><p>人类体内隐藏着一个时间节律的时钟，比24小时稍长。昼夜节律——大约一天的周期，而不是精确的一天。成年人的体内生物钟平均持续时间大约是24小时15分钟。</p><ul><li><p>两个实验</p><ul><li><p>实验一：1729年，法国地球物理学家让-雅克·德梅朗发现植物会产生自己生物钟的第一个证据。一种可以随着太阳运动的植物——含羞草，张开的叶片可以在白天追随太阳的弧形轨迹，晚上就会枯萎般的垂下。放在密不透光的盒子里，含羞草仍然保持着白天叶子洋洋得意的舒展，晚上叶子下垂的节律。</p></li><li><p>实验二：1938年，芝加哥大学的纳塞尼尔·克莱德曼教授和他的助理布鲁斯·理查森，带着6个星期的食物和水等进入一个很深且日光无法渗透的洞穴——肯塔基州的猛犸洞。当日光被切断后，克莱德曼和他的助理都没有随机的醒来和入睡，而是表现出一种不可预测的、重复性的模式，即有较长时间的清醒状态（约15个小时），并伴随有大约9个小时的睡眠。这个周期比昼夜24小时稍长。</p></li></ul></li></ul></li><li><p>时差的影响</p><ul><li><p>如果去不同时区的地方旅行，会明显感觉时差带来的影响。在新时区的白天会感觉到困倦，因为生物钟和相关的生命活动会仍然以为是晚上。而晚上会认为是白天。</p></li><li><p>向东旅行会比向西旅行要困难。向东要求你比平时更早的入睡，这对大脑来说很难直接完成。其次当我们与外界隔绝时，生物钟的昼夜节律会比一天稍长一些。</p></li></ul></li><li><p>睡眠压力和咖啡因</p><ul><li><p>影响清晰和睡眠的两个因素：24小时昼夜节律和睡眠压力。</p></li><li><p>腺苷：如果你在清醒时，一种叫做腺苷的化学物质正在大脑中积累，醒着的时间越久，积累的就会越多。你可以把腺苷看做一种化学指标，他能持续记录你从早上醒来后所度过的时间。腺苷增加后，睡眠欲望就会更盛。</p></li><li><p>咖啡因：这是一种可以让你更加警觉和清醒的化学物质，这是世界上被广泛使用的精神兴奋剂。</p><ul><li>咖啡因不仅普遍存在咖啡、某些茶类和多种能量饮料中，也存在于黑巧克力、冰琪琳等食品，以及减肥药、止疼药中。</li></ul></li></ul></li><li><p>睡眠周期</p><ul><li><p>大脑在睡眠期间会以非快速眼动睡眠和快速眼动睡眠进行反复转换，转换周期为90分钟。非快速眼动睡眠有可以分为1到4，数字越大睡的越深。</p></li><li><p>过程：清醒-&gt;快速眼动睡眠-&gt;非快速眼动睡眠1-&gt;非快速眼动睡眠2-&gt;非快速眼动睡眠3、4(慢波)。</p></li></ul></li><li><p>大脑怎样形成睡眠？</p><ul><li><p>深度非快速眼动睡眠期间，是你所经历的目前已知最伟大的神经协作表现之一。通过一种惊人的自我组织，成千上万的脑细胞决定团结起来开始“大合唱”。可以把每一个非快速眼动睡眠的慢波看做一个信使，能够在不同的大脑结构中心之间传送信息。慢波睡眠用于促进信息的传递和记忆的提炼。</p></li><li><p>快速眼动睡眠期间，被允许进入大脑皮层的不是外界的感觉。相反，情感、动机和记忆（包括过去的和现在的）的信号都会呈现在我们大脑皮层的视觉、听觉和运动感觉的大屏幕上。</p></li><li><p>从信息处理角度来说：清醒状态主要看作接受（经历和不断了解你周围的世界），非快速眼动睡眠看作反射（存储和强化新事实、新技能原材料），快速眼动睡眠看作集成（把这些原材料与所有过去的经历相互链接，并且在这一过程中对于世界的运转建立一个更加精确的模型，包括创新见解和解决问题的能力）。</p></li><li><p>张力缺失：在做梦阶段开始前的几秒钟，以及整个快速眼动睡眠阶段，你完全麻痹了，身体中的随意肌没有任何张力。不随意肌如呼吸控制相关的肌肉会在睡眠中持续工作。这一特征，是由强大的截止信号所引发的，从脑干中传出，经过脊髓传送。当这个信号到达各个肌肉后，肌肉会失去所有张力和力量。他们不会对大脑指令做出反应。实际上，你已经变成了一个囚犯，被快速眼动睡眠所囚禁。</p><ul><li>为什么进化决定快速眼动期间禁止肌肉活动？<ul><li>因为限制在梦境中的肌肉活动，不至于将梦境中的运动场景变为现实，否则可能错误地进行一场梦中打斗，或者是疯狂逃离梦中敌人的追赶，会导致一个灾难的后果。那基本可以告别基因库了。大脑麻痹了身体，这样才可以安全地做梦。</li></ul></li></ul></li></ul></li><li><p>白冠带鹀：</p><ul><li><p>对完全的睡眠剥夺具有无比强悍的适应能力，虽然有时间限制，而这是人类永远无法做到的。这种鸟进化了一种非凡的生物抵御能力，能适应完全的睡眠剥夺，只有在重大生存需要时才会使用这种能力。</p></li><li><p>如果在一年中的迁移期间，剥夺这种鸟的睡眠，它几乎不会受到任何不良后果影响。然而，在迁徙期之外，同样剥夺睡眠，则会造成大脑和身体的紊乱。</p></li></ul></li><li><p>一生中的睡眠</p><ul><li><p>出生前的睡眠：</p><ul><li><p>快速眼动睡眠在早期复杂的神经构造任务——建立会产生思想、记忆、感觉、决策和行动的神经高速公路和边路，并且快速眼动睡眠占据早期生命发育阶段的很大一部分。</p></li><li><p>如果扰乱或者削弱了正在发育中的婴儿大脑的快速眼动睡眠，就会产生不良后果。</p></li><li><p>在怀孕期间进行酒精摄入，与孩子患上包括自闭症在内的神经精神疾病的可能性增加有关联。</p></li></ul></li><li><p>童年的睡眠</p><ul><li><p>婴幼儿会出现多相睡眠：白天和晚上会有许多短的睡眠片段，中间被许多次唤醒所打断。随着孩子年龄越大，他们的睡眠段落就会越少，睡得也就越久越安稳。</p></li><li><p>到了4岁时，昼夜节律成了睡眠行为的总指挥，孩子会在夜间进行一段长时间睡眠，通常加一次白天的小睡来补充。这个阶段以及有多相睡眠转变为双相睡眠模式。</p></li></ul></li><li><p>青春期睡眠</p><ul><li><p>快速眼动睡眠建立和增加大量神经通路和相互廉洁，非快速眼动睡眠对神经通路进行修剪。</p></li><li><p>由于大自然经过数千年的进化、数十亿次的尝试后，现在已经学会建立相当准确的第一轮大脑连接，因此早期原始构造中的许多连接部分会留存下去。</p></li><li><p>随着深度非快速眼动睡眠在青春期对大脑进行最后的检修和完善，认知技能、推理和批判性思维能力开始提升，并且提升程度与非快速眼动睡眠的改变成正比。深度非快速眼动睡眠的变化总是发生在脑内的认知和发育标志出现之前的几周或几个月，这意味着一个方向性的影响：深度睡眠也许才是大脑成熟的驱动力，而不是反过来。</p></li><li><p>成熟之旅的最后一站式额叶前端，这正是理性思考和关键决策发生的位置。</p></li><li><p>深度非快速眼动睡眠对于青少年的健康发育起了重要作用，如精神分裂症、抑郁狂躁型忧郁症、重度抑郁症和多动症。</p></li><li><p>一些精神分裂症患者发育异常的大脑成熟模式与突触的修剪有关，特别是在控制理性逻辑思维的额叶区域——无法控制这些思维正是精神分裂症的主要症状。</p></li></ul></li><li><p>中年和老年的睡眠</p><ul><li><p>年纪渐长的人睡眠问题更加严重。老年人似乎需要和中年人一样多的睡眠，只不过不能产生那么多的睡眠。</p></li><li><p>老年人早睡早起，睡眠分散。深度睡眠数量和质量下降。</p></li><li><p>一个老年人的大脑额叶中央区域退化的越严重，深度非快速眼动睡眠就会减少的越厉害。</p></li><li><p>老年人在第二天早上比年轻人忘记了更多的信息——几乎相差了50%。深度睡眠减少得最多的老年人表现出了最为严重的过夜遗忘。</p></li><li><p>一种在大脑中积累的粘稠的毒性蛋白质，称为β-淀粉样蛋白，这是导致阿尔茨海默症的一个关键因素。</p></li><li><p>睡眠差是导致老年人认知和健康问题的最受忽视的因素，这些问题包括糖尿病、抑郁症、慢性疼痛、中风、心血管疾病和阿尔茨海默症等。</p></li></ul></li></ul></li><li><p>学习和睡眠的关系</p><ul><li><p>海马体：这是一种深藏在两侧大脑中的一个长长的手指形结构，它提供了一个短期的存储库，或者叫临时信息库，用于积累新的记忆。</p></li><li><p>小睡期间获得的睡眠纺锤波越多，醒来时学习能力就恢复的越强。重要的是，睡眠纺锤波并不能预测某人的学习天赋。纺锤波所预测的实际上是睡眠前后学习的变化，也就是学习能力的补充。</p></li><li><p>当睡眠纺锤波激增时，脉冲会不停的在海马体的短期、有限的存储空间和大脑皮层长期、更大的存储位置（类似于大容量内存硬盘）之间来回移动。这将基于事实的记忆从临时存储仓库（海马体）转移到长期安全的保险库（皮层）。这个过程中，睡眠会清理海马体，为这个短期信息库腾出大量的空余空间。当醒来时，海马体就会有更多的空间来吸收新的信息。</p></li><li><p>一个人晚上的睡眠纺锤波越多，第二天早上的学习能力就恢复得越多。</p></li><li><p>#非快速眼动睡眠能够将记忆及时上传到皮层，并且修复学习后不久就失去的记忆。</p></li><li><p>肌肉记忆更确切地说是大脑记忆。运动记忆通过睡眠会被转移到了在意识层面以下运作的大脑回路中，而不是像保存事实信息所需的那样从短期存储处到长期存储处的记忆转移。睡眠帮助大脑实现了动作序列的自动化，使其成为第二天性，这正是许多奥运会教练在提升精英运动员的技能时的目标。</p></li></ul></li><li><p>小睡</p><ul><li>在睡眠剥夺的情况下，充电小睡也也许会暂时地增强专注力，但不能挽救大脑复杂的功能，包括学习、记忆、情绪稳定、复杂的推理或决策等。</li></ul></li><li><p>阿尔茨海默症和睡眠：</p><ul><li><p>阿尔茨海默症以记忆力减退闻名，它和一种叫做β-淀粉样蛋白的毒性蛋白质的积聚有关，它们会在脑中聚集成粘性团块或斑块。淀粉样斑块对神经元具有毒性，会杀死周围的脑细胞。只影响大脑额叶的中间部分，这是年轻人产生深度非快速眼动睡眠脑电波所必需的。</p></li><li><p>脑部淀粉样蛋白沉积水平最高的人，深度睡眠损失也最严重，并且由此连锁导致了这些新的记忆未能成功地巩固。</p></li><li><p>深度非快速眼动睡眠的脉冲搏动节奏，可以将脑中排出物的量增加10-20倍，通过脑脊液来完成。</p></li><li><p>睡眠不足会在脑中积累有害物质，有害物质会影响大脑中的一些区域，这些区域既影响深度睡眠有和阿尔茨海默症有关。所以两者会相互影响，并向不好的方向发展。</p></li></ul></li><li><p>睡眠与身体健康</p><ul><li><p>睡眠越短，生命越短</p></li><li><p>睡眠与心血管疾病</p><ul><li>睡眠越短，发生心脏骤停，冠状动脉血栓的概率大幅增加。</li></ul></li><li><p>睡眠不足与糖尿病</p><ul><li>睡眠不足，会让人体吸收标准剂量的葡萄糖的效率比充分休息时降低了40%，细胞对胰岛素的接受程度低得多。</li></ul></li><li><p>睡眠不足与肥胖</p><ul><li>睡眠不足，瘦素和胃饥饿素出现失衡，降低饱腹感的瘦素浓度，升高诱发饥饿感的胃饥饿素浓度。</li></ul></li><li><p>睡眠不足与生殖系统</p><ul><li>睡眠不足，会导致睾酮水平明显下降。男性精子数量会低于正常睡眠的人。女性的卵泡释放激素下降。</li></ul></li><li><p>睡眠不足与癌症&#x2F;免疫系统</p><ul><li><p>睡眠不足，会造成人体免疫力下降，感染普通感冒、流感和肺炎等传染性疾病。</p></li><li><p>睡眠不足，会大大增加患上各种癌症的概率。欧洲一项2.5万人的大型研究中，睡眠时间不超过6小时的人比睡眠时间超过7小时的人，患癌症的风险增加了40%。</p></li><li><p>睡眠不足，也会引起肿瘤的生长速度，并且缺乏睡眠个体的肿瘤更具攻击性。</p></li></ul></li><li><p>睡眠不足与DNA</p><ul><li>睡眠不足不仅会改变基因的活性和表达，还会攻击你的遗传物质本省的物理结构。</li></ul></li></ul></li><li><p>作为夜间疗法的梦</p><ul><li><p>梦境可以帮助人们忘记痛苦的经历</p><ul><li><p>快速眼动睡眠时的梦会从你白天经历的困难，甚至是创伤性的情绪事件中把令你痛苦的刺剔除，于是第二天早上醒来时，你的情绪问题就会得到缓解。</p></li><li><p>在梦中梦到那些痛苦经历，才能够逐渐从绝望中获得疗愈。而做梦没有梦见痛苦经历的人，仍然无法摆脱这一事件。</p></li></ul></li></ul></li><li><p>梦境可以增强人的创造力和想象力</p></li><li><p>安眠药与非药物治疗</p><ul><li><p>安眠药会让使用者脑电波中缺少幅度最大、最深的脑电波，并且第二天可能出现的嗜睡、白天的健忘、夜间无意识地做动作。</p></li><li><p>服用安眠药比不服用安眠药的人更有可能死亡。</p></li><li><p>安眠药很可能不会提供与自然睡眠相同的恢复性免疫益处。</p></li><li><p>安眠药可能导致服药者缺乏修复性睡眠，或药物让他们白日感觉昏沉，或两者相加。</p></li><li><p>服用安眠药的人比没有服用安眠药的人发生癌症的可能性高出了30%到40%。</p></li><li><p>目前最有效的失眠症疗法，比安眠药更有效——认知行为疗法：</p><ul><li>旨在打破不良的睡眠习惯并化解阻碍睡眠的焦虑问题。</li></ul></li></ul></li><li><p>12条健康睡眠小贴士</p><ul><li><p>\1. 坚持固定的睡眠时间。</p></li><li><p>\2. 锻炼很有益，但不要在一天中太晚的时间进行。</p></li><li><p>\3. 避免咖啡因和尼古丁的摄入。</p></li><li><p>\4. 睡前避免喝酒精饮料。</p></li><li><p>\5. 深夜避免大量进食和喝饮料。</p></li><li><p>\6. 尽量避免使用会延迟或破坏睡眠的药物。</p></li><li><p>\7. 下午3点以后不要午睡。</p></li><li><p>\8. 睡前放松。</p></li><li><p>\9. 睡前洗个热水澡。</p></li><li><p>\10. 保持卧室幽暗凉爽。</p></li><li><p>\11. 适当晒晒太阳。</p></li><li><p>\12. 醒着时不要躺在床上。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言与文学</category>
      
      <category>阅读笔记</category>
      
      <category>健康</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加utterances评论插件</title>
    <link href="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装utterances"><a href="#1-安装utterances" class="headerlink" title="1. 安装utterances"></a>1. 安装utterances</h2><p>先登录Github，创建一个仓库，名字可以自取，这里取“commit-utterances”。  </p><p>点击<a href="https://github.com/apps/utterances">app 安装</a>进入下面页面  </p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514154451258.png" alt="image-20230514154451258"></p><p>点击“Install”后，跳转到下面页面，选择“Only select repositories”,找到commit-utterances。  </p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514154827034.png" alt="image-20230514154827034"></p><p>后面需要输入密码进行登录。 </p><p>配置，填写repo</p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514160028131.png" alt="image-20230514160028131"></p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514160220274.png" alt="image-20230514160220274"></p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514160422327.png" alt="image-20230514160422327"></p><p>上面的最后一栏，Enable Utterances自动生成配置脚本。</p><h2 id="2-配置Hexo-Fluid"><a href="#2-配置Hexo-Fluid" class="headerlink" title="2. 配置Hexo-Fluid"></a>2. 配置Hexo-Fluid</h2><p>在Hexo-Fluid博客目录中，打开_config.fluid.yml文件，找到评论插件部分，参数设置如下：</p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514160747529.png" alt="image-20230514160747529"></p><p>具体的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">DFQX/commit-utterances</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">title</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-comment">#</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure><p>重新clean后进行生成部署，可以看到，评论界面了：</p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514170631633.png" alt="image-20230514170631633"></p><p>这个时候发现，鼠标停留在上面时，被禁用状态，登录你的Github</p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514170748843.png" alt="image-20230514170748843"></p><p>现在发现可以进行评论了</p><p><img src="/2023/05/14/%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/image-20230514170905667.png" alt="image-20230514170905667"></p>]]></content>
    
    
    <categories>
      
      <category>计算机技术</category>
      
      <category>Hexo blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>湖畔书院</title>
    <link href="/2023/05/14/%E6%B9%96%E7%95%94%E4%B9%A6%E9%99%A2/"/>
    <url>/2023/05/14/%E6%B9%96%E7%95%94%E4%B9%A6%E9%99%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="湖畔书院"><a href="#湖畔书院" class="headerlink" title="湖畔书院"></a>湖畔书院</h2><p>2022年11月19日第一次发现深圳宝安福永附近的湖畔书屋，随后周末经常来逛图书馆。</p><p>今天又来图书馆了，还有十几天就要离开深圳，以后来此的机会就少了！</p><img src="湖畔书院/微信图片_20230514135802.jpg" alt="微信图片_20230514135802" style="zoom:33%;" />  <p>图书馆外刚好下着小雨，穿着短袖，室内温度有点凉。</p><p><img src="湖畔书院/微信图片_202305141358031.jpg" alt="微信图片_202305141358031" style="zoom:33%;" />  <img src="湖畔书院/微信图片_20230514135803.jpg" alt="微信图片_20230514135803" style="zoom:33%;" />  </p><img src="湖畔书院/微信图片_202305141358034.jpg" alt="微信图片_202305141358034" style="zoom:33%;" /><img src="湖畔书院/微信图片_202305141358032.jpg" alt="微信图片_202305141358032" style="zoom: 33%;" /><img src="湖畔书院/微信图片_202305141358033.jpg" alt="微信图片_202305141358033" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>生活与旅行</category>
      
      <category>生活学习</category>
      
      <category>图书馆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图书馆风景</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>心电图发展历史</title>
    <link href="/2023/05/14/%E5%BF%83%E7%94%B5%E5%9B%BE%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/"/>
    <url>/2023/05/14/%E5%BF%83%E7%94%B5%E5%9B%BE%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em>心脏病的科学进入了新的篇章，他不是靠一个人的工作，而是许多天才的科学家，超越了任何政治藩篱，潜心钻研而成。他们在世界各地，为科学的进步，为达到造福于深受病患折磨的人类目标，贡献了全部的精力</em></p><p>——<em>威廉·埃因托芬</em></p></blockquote><p>从心电图的诞生至今有一百多年，经过这一个多世纪的发展，心电图的应用也更普及化，为数以亿万的患者及时诊断病情，降低疾病和死亡风险。心电图的出现为人类临床医学发展做出重要贡献，被誉为“心电图之父”[5]的荷兰杰出生理学家威廉·埃因托芬（ Willem Einthoven，1860-1927）因对心电图学的开创性工作和无与伦比的贡献，荣获1924年获诺贝尔生理学或医学奖。</p><p>翻开历史篇章，回到心电图发现的前夜，1791年的某一天，意大利博洛尼亚大学杰出的解剖学家伽伐尼（Luigi Galvani，1737-1798）将一只解剖的青蛙放在一台电机旁边的实验室桌子上，他的助手使用刀子触碰青蛙腿的神经时，他注意到青蛙腿部肌肉在剧烈收缩[1][2][3]。这一现象立刻引起了他的注意，他放弃手中的其他工作，开始研究这一现象，并且很快发现只有电机产生火花时才会使肌肉收缩。随后的18世纪末和19世纪初围绕着蛙腿与金属片接触产生跳动产生了跨世纪的争论。直到1842年，意大利物理学家卡洛·马特奇（ Carlo Matteucci，1811-1868）才证实蛙心的收缩跳动伴随着电流。第二年，电生理的奠基人德国生理学家埃米尔·杜博伊斯·雷蒙（ Emil DuBois-Reymond）描述了一种伴随肌肉收缩的“动作电位”，并且确认了关于卡洛·马特奇的蛙心电活动现象。</p><p>1856年，来自瑞士的生理学家阿尔伯特·冯·科利克（ Albert von Kölliker）在他位于德国维尔茨堡的小实验室里做了许多值得注意的实验，其中最引人注意的是和同事海因里希·穆勒（Heinrich Müller）一起做的。他们将青蛙的心脏暴露在实验桌上，并观察到每一次收缩会产生电流。这一事实告知给科学界人士，但受限当时落后的设备仪器，并没有实际的用途。他们的工作有着很大的意义，将其他人的研究聚焦在心脏跳动时所产生的电活动上。 </p><p>到了1878年，有了进一步的进展。英国的两位生理学家约翰·伯顿·桑德森（ John Burdon Sanderson）和弗雷德里克·佩奇（ Frederick Page）使用毛细管静电计测量心电流，并首次描述了心室的除极和复极过程。每次心脏收缩的电流呈现两相，短持续期相中心尖为正性，较长时期的第二相中心尖为负性。毛细管静电计是一种精致的、喜怒无常的仪器，通常需要操作它生理学家投入大量的精力和保持极大的耐心，才能使它成功运行。这个阶段的研究工作仍然需要将心脏直接和仪器相连接，这使得它只能成为实验室该关注的问题。</p><p>1887年，英国伦敦圣玛丽医院（St. Mary’s Hospital）的杰出生理学家奥古斯都·D·沃勒（ Augustus D. Waller，1856-1922）进行一系列的深入研究，首次测量了人体体表的心电图[4]。他使用毛细静电计的两个电极分别与人体胸壁和背部接触，可以观察到每一次心跳都会伴随着汞柱轻微但急剧地移动。并且在随后的研究中，将双手或者一手一脚放在盐酸溶液中，然后将毛细管静电计连接溶液也可以观察到电流变化。正是这个时候“心电图”一词被创造了出来，这些早期的发现也为第一个心电图的发展铺平了道路。此时，心电仪器记录的水平远远低于临床水平，但沃勒的研究对心电图的后续发展仍然起到至关重要的作用。</p><p><img src="/2023/05/14/%E5%BF%83%E7%94%B5%E5%9B%BE%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/wps1.png" alt="威廉·埃因托芬&lt;br&gt;1860-1927"></p><p>在1889年巴塞尔（Basel）举行的第一届国际电生理会议上，威廉·埃因托芬见到沃勒并观看了他的记录技术，受到了强烈的震撼。此后13年时间，威廉·埃因托芬致力于毛细管静电计记录心电图的研究。他改进了多项技术，使得记录更为清晰。他认识到汞柱的移动具有惯性使毛细管静电计具有低频率响应的特性，这样会造成记录的心电图形失真，于是采用复杂的数学方法进行校正。最终获得了非常接近现代描记的心电波形，并在1895年的论文中，首次将5个电偏转的波形按数学传统命名为P、Q、R、S和T波。当然，由于毛细管静电计的低频响特性，仍然无法灵敏的测量心电图。威廉·埃因托芬将关注点放在了改进仪器上。1901年改进了弦线电流计，1902报道第一批用弦线电流计记录的心电图，1903年威廉·埃因托芬分别使用德文和英文论文报告了他之前所做的实验，包括弦线电流计和6个病例的记录。当时，威廉·埃因托芬的弦线电流计非常庞大，重达600多磅，操作困难，并且设置于距离莱顿大学（ Leiden University）附属医院约1英里的生理学实验室里。但这个设备在当时是最先进的，并且这台设备记录的心电图和现代的心电装置记录的心电图在频响上毫不逊色。他的这些工作在不久之后可以预见会对心脏病的病理生理学发挥作用，也会在临床治疗中起到重要的指导作用。</p><p>随着时间的推移，这种仪器被大量简化，不再占用那么大的空间，并且人们对心电图设备在临床医学上的发展也非常迅速，已经形成一个独立的学术分支。经过一个多世纪的技术迭代，包括电子技术、信息技术、材料技术、计算机技术以及一些工程技术的发展，如今已经有便携式的设备可用于私人家庭的床边工作，也有可穿戴式的动态心电设备，以及更小的心贴用于我们心电信号的记录。如今，查看心电图在我们的生活中已经不是什么神秘的事了，在医院体检中经常被采用，因为操作简单、价格实惠并且对心脏疾病诊断起到重大的作用。当我们再看看这段历史，从1791年发现生物电信号现象开始，到1903年发明可以用于临床记录的心电记录设备，跨过了一个多世纪的时间。这段艰难的旅程，是无数杰出的科学家经过几代人锲而不舍的接力共同完成的。每次重大科学技术的发展，从来都不是一蹴而就。正如威廉·埃因托芬在1924年获得诺贝尔奖时发表演讲所说：“心脏病的科学进入了新的篇章，他不是靠一个人的工作，而是许多天才的科学家，超越了任何政治藩篱，潜心钻研而成。他们在世界各地，为科学的进步，为达到造福于深受病患折磨的人类目标，贡献了全部的精力”[6][7]。</p><p>[1] Leaman Jr W G. The history of electrocardiography[J]. Annals of Medical History, 1936, 8(2): 113.</p><p>[2] 方祖祥.心电图技术发展的历史回顾[J].上海生物医学工程,1995(04):10-14.</p><p>[3] Fye W B. A history of the origin, evolution, and impact of electrocardiography[J]. The American journal of cardiology, 1994, 73(13): 937-949.</p><p>[4] Waller A D. A demonstration on man of electromotive changes accompanying the heart’s beat[J]. The Journal of physiology, 1887, 8(5): 229.</p><p>[5] Moukabary T. Willem einthoven (1860-1927): Father of electrocardiography[J]. Cardiology journal, 2007, 14(3): 316-317.</p><p>[6] Willem Einthoven – Facts. NobelPrize.org. Nobel Prize Outreach AB 2022. Sat. 31 Dec 2022. <a href="https://www.nobelprize.org/prizes/medicine/1924/einthoven/facts/">https://www.nobelprize.org/prizes/medicine/1924/einthoven/facts/</a></p><p>[7] Cajavilca C, Varon J. Willem Einthoven: The development of the human electrocardiogram[J]. Resuscitation, 2008, 76(3): 325-328.</p>]]></content>
    
    
    <categories>
      
      <category>生物信号</category>
      
      <category>ECG</category>
      
      <category>心电图基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DLL创建与使用</title>
    <link href="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. <strong>前言</strong></h2><p>在一些项目开发过程中，有时需要将自己写的C++程序给别人调用。如何去做呢？我们可以将C++代码编译为.dll结尾的文件，然后在其他项目中使用这个文件，从而调用里面的应用程序。</p><h2 id="2-生成-dll文件"><a href="#2-生成-dll文件" class="headerlink" title="2. 生成.dll文件"></a>2. <strong>生成.dll文件</strong></h2><h3 id="2-1-使用VS2019创建项目"><a href="#2-1-使用VS2019创建项目" class="headerlink" title="2.1 使用VS2019创建项目"></a>2.1 <strong>使用VS2019创建项目</strong></h3><p>创建动态链接库项目-&gt;下一步</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps1.jpg" alt="img"> </p><p>创建名为Dll2的项目名</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps2.jpg" alt="img"> </p><p>创建的项目会自动生成一些文件，包括framework.h&#x2F;pch.h&#x2F;dllmain.cpp&#x2F;pch.cpp文件，如下：</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps3.jpg" alt="img"> </p><p>对于pch.h预编译头的处理，如果一些较小的项目可以忽略不计。对于一些大项目，或者包含很多需要预编译的宏定义时，可以考虑使用者预编译头，它可以提高程序的执行效率。</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps4.jpg" alt="img"> </p><p>如果想去掉这一行#include “pch.h”，也可以在项目名上-&gt;右键-&gt;属性-&gt;配置属性-&gt;C&#x2F;C++-&gt;预编译头-&gt;不使用预编译头。如果不这样操作，删掉pch.h文件后，生成解决方案时会出现错误，如上。</p><h3 id="2-2-编写工程代码"><a href="#2-2-编写工程代码" class="headerlink" title="2.2 编写工程代码"></a>2.2 <strong>编写工程代码</strong></h3><p>删掉一些不需要的自动生成的代码，创建两个简单的代码，math2.h和math2.cpp文件，文件目录如下：</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps5.jpg" alt="img"> </p><p>math2.h代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SimpleClass_EXPORTS2  <span class="hljs-comment">// 本项目C++预编译头</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TEST_DLL __declspec(dllexport)  <span class="hljs-comment">// 设置导出库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TEST_DLL __declspec(dllimport)  <span class="hljs-comment">// 设置导入库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TEST_DLL</span> MyClass<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyClass</span>();<br>~<span class="hljs-built_in">MyClass</span>();<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getA</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getB</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><br>math2.cpp代码如下：<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;math2.h&quot;</span></span><br><br><br>MyClass::<span class="hljs-built_in">MyClass</span>()<br>&#123;<br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br>&#125;<br><br>MyClass::~<span class="hljs-built_in">MyClass</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MyClass::add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MyClass::mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a * b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MyClass::getA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MyClass::getB</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-生成-dll和-lib文件"><a href="#2-3-生成-dll和-lib文件" class="headerlink" title="2.3 生成.dll和.lib文件"></a>2.3 <strong>生成.dll和.lib文件</strong></h3><p>生成.dll文件只需要在菜单栏的“生成”选择“生成解决方案”即可。</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps6.jpg" alt="img"> </p><p>在代码的项目目录下，可以看到.dll文件和.lib文件，输出方式可以选择Debug模式或者Relese模式，选择不同模式生成的目录也会不同。</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps7.jpg" alt="img"> </p><h3 id="2-4-引用动态链接库"><a href="#2-4-引用动态链接库" class="headerlink" title="2.4 引用动态链接库"></a>2.4 <strong>引用动态链接库</strong></h3><p>引用动态链接库时，主要有4个步骤，分别如下：</p><p>1）包含头文件目录</p><p>2）包含lib文件目录</p><p>3）链接器附加依赖项，添加lib文件</p><p>4）将dll文件复制到所需项目的文件中</p><p>新建空白项目</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps8.jpg" alt="img"> </p><p>可以在新建的项目中，创建include和lib两个目录，include里包含需要引用的头文件，lib中包含.lib文件。dll文件复制到主函数同级目录中。</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps9.jpg" alt="img"> </p><p>新建一个空白项目，命名为test2，再新建一个test2.cpp文件</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps10.jpg" alt="img"> </p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;math2.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>MyClass myclass = <span class="hljs-built_in">MyClass</span>();<br><br>cout &lt;&lt; myclass.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>右键项目-&gt;属性-&gt;配置属性-&gt;VC++目录</p><p>包含目录：头文件</p><p>库目录：.lib文件</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps11.jpg" alt="img"> </p><p>链接器-&gt;输入-&gt;附加依赖项，添加.lib文件名</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps12.jpg" alt="img"> </p><p>运行结果：</p><p><img src="/2023/05/03/DLL%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/wps13.jpg" alt="img"> </p>]]></content>
    
    
    <categories>
      
      <category>计算机技术</category>
      
      <category>C++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新建博客post页默认配置</title>
    <link href="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-hexo的布局"><a href="#1-hexo的布局" class="headerlink" title="1. hexo的布局"></a>1. hexo的布局</h2><p>创建文章前要先选定模板，在hexo中也叫做布局。hexo支持三种布局（layout）：post(默认)、draft、page。<br>当使用hexo new blogname命令时，hexo会默认使用post布局，并且自动在source&#x2F;_posts目录中生成blogname.md文件</p><h3 id="1-1-指定布局"><a href="#1-1-指定布局" class="headerlink" title="1.1 指定布局"></a>1.1 指定布局</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>[layout_name] draft1<br></code></pre></td></tr></table></figure><p>这个命名会创建draft1的特定布局文章</p><h3 id="1-2-Front-matter"><a href="#1-2-Front-matter" class="headerlink" title="1.2 Front-matter"></a>1.2 Front-matter</h3><p>当新建一篇文章时，会在.md文件中出现下面的内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 新建博客post页默认配置<br>date: 2023-05-02 18:33:01<br><span class="hljs-section">tags:</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>这个在hexo中称为<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>,用来配置一篇文章的基本信息，如文章标题，时间，标签，归类等等。<br><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/Front_matter.png" alt="img">  </p><h3 id="1-3-标签"><a href="#1-3-标签" class="headerlink" title="1.3 标签"></a>1.3 标签</h3><p><strong>标签没有顺序和层次</strong></p><p>写法：  </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span><br>- ps3<br>- games<br></code></pre></td></tr></table></figure><h3 id="1-4-分类"><a href="#1-4-分类" class="headerlink" title="1.4 分类"></a>1.4 分类</h3><p><strong>分类有顺序和层次</strong></p><p>写法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><h2 id="2-如何自定义布局"><a href="#2-如何自定义布局" class="headerlink" title="2. 如何自定义布局"></a>2. 如何自定义布局</h2><p>默认布局并不能满足我们的日常编辑，比如为一篇文章编写标签、归档等信息时，默认布局并没有这些配置项，需要手动填写，这为每次创建博客文章时带来不方便。    </p><h3 id="2-1-布局文件"><a href="#2-1-布局文件" class="headerlink" title="2.1 布局文件"></a>2.1 布局文件</h3><p>布局文件本身是一个.md文件，在scafflods文件下，可以看到有三个文件:draft、page、post<br><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/scafflods.png" alt="img"><br>修改post.md文件后，执行hexo new test，生成文件的Front-matter如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-05-02 19:09:20</span><br><span class="hljs-attr">updated:</span><br><span class="hljs-string">tags:Typora</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="3-自动生成同名文件夹"><a href="#3-自动生成同名文件夹" class="headerlink" title="3. 自动生成同名文件夹"></a>3. 自动生成同名文件夹</h2><h3 id="3-1-文章中如何插入图片等资源"><a href="#3-1-文章中如何插入图片等资源" class="headerlink" title="3.1 文章中如何插入图片等资源"></a>3.1 文章中如何插入图片等资源</h3><p>markdown中插入图片使用下面命令  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt</span>](<span class="hljs-link">path [title]</span>)<br></code></pre></td></tr></table></figure><ul><li>path是必选的，表示图片的路径，可使用绝对或相对路径。</li><li>alt是可选的，是图片无法加载时的替代描述文本。</li><li>title是可选的，是图片的标题。</li></ul><h3 id="3-2-生成同名路径"><a href="#3-2-生成同名路径" class="headerlink" title="3.2 生成同名路径"></a>3.2 生成同名路径</h3><p>当博客数量比较多时，博客中存在的图片等资源也会多，如果每次新建博客时，图片将不好与博客相关联。手动去新建一个与博客同名的文件夹会比较麻烦，下面将设置新建博客时自动生成同名文件夹。<br>在博客根目录下<code>_config.yml</code>配置文件中，设置  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当hexo new test1时，会在<code>source/_posts</code>路径下生成<code>test1.md</code>文件和test1文件夹。<br><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/test1_folder.png" alt="img"></p><h3 id="3-3-图片无法显示"><a href="#3-3-图片无法显示" class="headerlink" title="3.3 图片无法显示"></a>3.3 图片无法显示</h3><p>在<code>hexo s</code>后，图片没有显示出来，通过查看生成的html文件发现，图片路径不对，这里的不对和我个人的配置有关，后面再讲具体情况。在官网中的<a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a>中，可以看到有两种方式导入图片，这里选择<strong>使用Markdown嵌入图片</strong>的方式导入图片，这种方式比较方便。  </p><p>按照官网配置：首先下载：<code>npm install hexo-renderer-marked --saved</code>，下载好后配置<code>_config.yml</code>文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>启用后，资源图片会被自动解析为文章路径。下面是md文件中的路径。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503191606848.png" alt="image-20230503191606848"></p><p>解析后，变为&#x2F;2023&#x2F;05&#x2F;02&#x2F;xxx&#x2F;img_xxx.png， xxx即为图中乱码的东西，这是因为路径中包含中文，整个路径是部署后的路径。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503191749863.png" alt="image-20230503191749863"></p><p>此时可以发现部署后就可以看到图片了。</p><h3 id="3-4-在本地和部署页面都可以显示"><a href="#3-4-在本地和部署页面都可以显示" class="headerlink" title="3.4 在本地和部署页面都可以显示"></a>3.4 在本地和部署页面都可以显示</h3><p>按照上面的部署没有出现问题时是可以显示图片，但是写博客时会配合编辑器来写，这里使用Typora编辑器，具体可看下一章的介绍。当复制图片到编辑器时，会发现多了一个路径，<code>当前文件名同名路径/xxx.png</code>，如下：</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503193116515.png" alt="image-20230503193116515"></p><p>当前文件名的同名路径使得本地可以查看，但是部署后浏览器中将无法查看，如果要两者都可以查看，需要下面的步骤。</p><p>首先，找到目录下的<code>\node_modules\hexo-renderer-marked\lib\</code>的renderer.js文件</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503193231146.png" alt="image-20230503193231146"></p><p>修改代码进行调试</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503193615803.png" alt="image-20230503193615803"></p><p>发现，本来只需要<code>Front_matter.png</code>就可以正确解析，但是Typora复制后会带上一个同名的相对路径，所以将这个路径按照’&#x2F;‘分开为数组后，提取数组中最后一个值就可以了。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503193751746.png" alt="image-20230503193751746"></p><p>添加代码去掉上面代码中的打印信息部分，就可以变为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>)&gt;-<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">var</span> arr = href.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br>    href = arr[arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>现在就可以在本地和部署后浏览器中都能查看图片了。</p><h3 id="3-5-解析图片路径出现的问题"><a href="#3-5-解析图片路径出现的问题" class="headerlink" title="3.5 解析图片路径出现的问题"></a>3.5 解析图片路径出现的问题</h3><p>如果上面已经解决了问题，可以不用看这一节。在本机配置过程中出现了一个非常严重的错误，导致按照上面的步骤不通过。当执行命令<code>hexo g</code>时出现下面的问题：</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503194523202.png" alt="image-20230503194523202"></p><p>这个问题会导致生成的html文件中路径无缘无故包含<code>/.io//</code>的前缀，这是解析出错了。通过执行<code>npm audit</code>命名发现npm有一个包出现问题。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503194817362.png" alt="image-20230503194817362"></p><p>通过<code>npm un hexo-asset-image</code>命令，移除hexo-asset-image插件，之后执行上述步骤就没有出现问题了。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503194935313.png" alt="image-20230503194935313"></p><h2 id="4-编辑器"><a href="#4-编辑器" class="headerlink" title="4. 编辑器"></a>4. 编辑器</h2><h3 id="4-1-Typora编辑器"><a href="#4-1-Typora编辑器" class="headerlink" title="4.1 Typora编辑器"></a>4.1 Typora编辑器</h3><p>Typora编辑器可以将复制到文章的图片自动保存在同名文件夹下。在文件-&gt;偏好设置-&gt;图像-&gt;选择复制到指定路径。</p><p><img src="/2023/05/02/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2post%E9%A1%B5%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/image-20230503184335281.png" alt="Typora图像设置"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/132823826">使用hexo新建、编辑并预览文章</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机技术</category>
      
      <category>Hexo blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像处理</title>
    <link href="/2023/03/17/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2023/03/17/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分类首页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>医疗前沿</title>
    <link href="/2023/03/16/%E5%8C%BB%E5%AD%A6%E5%89%8D%E6%B2%BF/"/>
    <url>/2023/03/16/%E5%8C%BB%E5%AD%A6%E5%89%8D%E6%B2%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>医疗前沿</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分类首页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字信号处理</title>
    <link href="/2023/03/16/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    <url>/2023/03/16/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数字信号处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分类首页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能</title>
    <link href="/2023/03/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <url>/2023/03/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分类首页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/2023/03/15/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/15/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="新建的md文件配置项"><a href="#新建的md文件配置项" class="headerlink" title="新建的md文件配置项"></a>新建的md文件配置项</h2><p>编辑博客时前面的Front-matter设置，如下图所示：</p><p><img src="/2023/03/15/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Front-matter.png"></p><ul><li>title    网页文章标题</li><li>date    文章创建如期</li><li>comments文章评论功能是否启动</li><li>tags    文章标签</li><li>categories文章分类</li><li>keywords文章关键字</li></ul><h2 id="新建页"><a href="#新建页" class="headerlink" title="新建页"></a>新建页</h2><p>执行命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> cv<br></code></pre></td></tr></table></figure><p>如果要将新建页单独链接到指定的HTML页面，就将<code>_config.yml</code>文件中的熏染路径给关闭，如<code>skip_render: cv/**</code>。<br>注意：如果渲染出现问题，就<code>hexo clean</code>单独执行一下。</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><p>执行命令：  </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> first_blog<br></code></pre></td></tr></table></figure><p>然后可以在source文件夹中找到first_blog.md文件，然后进行博客编辑。</p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>比如在关于页中，下拉会出现一些菜单，编辑<code>_config.yml</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">menu</span>:<br>    - ***<br>    - &#123; key: <span class="hljs-string">&quot;about&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span>, submenu: [&#123; key: <span class="hljs-string">&#x27;简介&#x27;</span>, link: <span class="hljs-string">&#x27;/about/&#x27;</span>, icon: <span class="hljs-string">&quot;iconfont icon-about&quot;</span>&#125;,&#123; key: <span class="hljs-string">&#x27;CV&#x27;</span>, link: <span class="hljs-string">&quot;/cv/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-About&quot;</span>&#125;]&#125;<br></code></pre></td></tr></table></figure><h2 id="如何更改图标"><a href="#如何更改图标" class="headerlink" title="如何更改图标"></a>如何更改图标</h2><p>在<a href="https://fontawesome.com/icons">图标</a>中选择自己喜欢的图标加入购物车中，然后可以添加项目或者下载代码，这里选择添加项目如下图:<br><img src="/2023/03/15/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/iconfont_css.png" alt="img"></p><h2 id="删除博客"><a href="#删除博客" class="headerlink" title="删除博客"></a>删除博客</h2><p>先将source文件夹中想要删除的博客md文件删除，再删除<code>.deploy_git</code>，然后执行命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h2 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h2><ul><li><a href="https://fontawesome.com/icons">图标引用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机技术</category>
      
      <category>Hexo blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/07/Hello%20World/"/>
    <url>/2023/03/07/Hello%20World/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机技术</category>
      
      <category>Hexo blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
